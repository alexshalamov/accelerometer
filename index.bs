<pre class="metadata">
Title: Accelerometer
Level: none
Status: ED
ED: https://w3c.github.io/accelerometer/
Shortname: accelerometer
TR: https://www.w3.org/TR/accelerometer/
Previous Version: https://www.w3.org/TR/2017/WD-accelerometer-20170814/
Editor: Anssi Kostiainen 41974, Intel Corporation, http://intel.com/
Editor: Alexander Shalamov 78335, Intel Corporation, http://intel.com/
Group: dap
Abstract:
  This specification defines {{Accelerometer}}, {{LinearAccelerationSensor}} and {{GravitySensor}} interfaces for
  obtaining information about [=acceleration=] applied to the X, Y and Z axis
  of a device that hosts the sensor.
Version History: https://github.com/w3c/accelerometer/commits/gh-pages/index.bs
!Bug Reports: <a href="https://www.github.com/w3c/accelerometer/issues/new">via the w3c/accelerometer repository on GitHub</a>
Indent: 2
Repository: w3c/accelerometer
Markup Shorthands: markdown on
Inline Github Issues: true
!Test Suite: <a href="https://github.com/w3c/web-platform-tests/tree/master/accelerometer">web-platform-tests on GitHub</a>
Boilerplate: omit issues-index, omit conformance
Default Biblio Status: current
Note class: note
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/sensors; spec: GENERIC-SENSOR
  type: dfn
    text: high-level
    text: sensor
    text: latest reading
    text: default sensor
    text: construct a sensor object; url: construct-sensor-object
    text: sensor type
    text: local coordinate system
urlPrefix: https://w3c.github.io/screen-orientation; spec: SCREEN-ORIENTATION
  type: dfn
    text: current orientation type;  url: dfn-current-orientation-type
    text: dom screen; url: dom-screen
</pre>

Introduction {#intro}
============

The {{Accelerometer}}, {{LinearAccelerationSensor}} and {{GravitySensor}} APIs extends the Generic Sensor API [[GENERIC-SENSOR]]
interface to provide information about [=acceleration=] applied to device's
X, Y and Z axis in [=local coordinate system=] defined by device.

Examples {#examples}
========

<div class="example">
    <pre highlight="js">
    let sensor = new Accelerometer();
    sensor.start();

    sensor.onreading = () => {
        console.log("Acceleration along X-axis: " + sensor.x);
        console.log("Acceleration along Y-axis: " + sensor.y);
        console.log("Acceleration along Z-axis: " + sensor.z);
    }

    sensor.onerror = event => console.log(event.error.name, event.error.message);
    </pre>
</div>

<div class="example">
    The following example shows how to use gravity sensor that provides
    readings in the [=screen coordinate system=]. The snippet will print message to the
    console when the [=dom screen=] is perpendicular to the ground and bottom of the
    rendered web page is pointing downwards.
    <pre highlight="js">
    let sensor = new GravitySensor({frequency: 5, referenceFrame: "screen"});

    sensor.onreading = () => {
      if (sensor.y >= 9.8) {
        console.log("Web page is perpendicular to the ground.");
      }
    }

    sensor.start();
    </pre>
</div>

<div class="example">
    The following example detects shake gesture along x axis of the device, regardless
    of the orientation of the [=dom screen=].
    <pre highlight="js">
    const shakeThreshold = 25;

    let sensor = new LinearAccelerationSensor({frequency: 60});

    sensor.addEventListener('reading', () => {
      if (sensor.x > shakeThreshold) {
        console.log("Shake detected.");
      }
    });

    sensor.start();
    </pre>
</div>

Use Cases and Requirements {#usecases-requirements}
==============================

The use cases and requirements are listed in the <cite><a href="https://w3c.github.io/motion-sensors/#usecases-and-requirements">
Motion Sensors Explainer</a></cite> and <cite><a href="https://w3c.github.io/sensors/usecases.html">
Sensor use cases</a></cite> documents.

Security and Privacy Considerations {#security-and-privacy}
===================================

There are no specific security and privacy considerations
beyond those described in the Generic Sensor API [[!GENERIC-SENSOR]].

Model {#model}
=====

The <dfn id="accelerometer-sensor-type">Accelerometer</dfn> <a>sensor type</a>'s associated {{Sensor}} subclass is the {{Accelerometer}} class.

The <a>Accelerometer</a> has a [=default sensor=], which is the device's main accelerometer sensor.

The <a>Accelerometer</a> has an associated {{PermissionName}} which is <a for="PermissionName" enum-value>"accelerometer"</a>.

A [=latest reading=] for a {{Sensor}} of <a>Accelerometer</a> <a>sensor type</a> includes three [=map/entries=]
whose [=map/keys=] are "x", "y", "z" and whose [=map/values=] contain device's [=acceleration=]
about the corresponding axes. Values can contain also device's [=linear acceleration=] or [=gravity=]
depending on which object was instantiated.

The <dfn>acceleration</dfn> is the rate of change of velocity of a device with respect to time. Its 
unit is the metre per second squared (m/s<sup>2</sup>) [[SI]].

The frame of reference for the [=acceleration=] measurement must be inertial, such as, the device in free fall would
provide 0 (m/s<sup>2</sup>) [=acceleration=] value for each axis.

The sign of the [=acceleration=] values must be according to the right-hand convention in a [=local coordinate
system=] (see figure below).

<img src="images/accelerometer_coordinate_system.png" srcset="images/accelerometer_coordinate_system.svg" style="display: block;margin: auto;" alt="Accelerometer coordinate system.">

The {{LinearAccelerationSensor}} class is an {{Accelerometer}}'s subclass. The {{LinearAccelerationSensor}}'s
[=latest reading=] contains device's [=linear acceleration=] about the corresponding axes.

The <dfn>linear acceleration</dfn> is an [=acceleration=] that is applied to the device that hosts
the sensor, without the contribution of a [=gravity=] force.

The {{GravitySensor}} class is an {{Accelerometer}}'s subclass. The {{GravitySensor}}'s
[=latest reading=] contains device's [=acceleration=] due to the effect of [=gravity=] force about the corresponding axes.

The <dfn>gravity</dfn> is a force that attracts an object to the center of the earth, or towards any other physical object having mass.

Reference Frame {#reference-frame}
----------------

The reference frame for the sensor classes defined in this specification,
is expressed in a [=local coordinate system=], which can be defined as
either the [=device coordinate system=], or the [=screen coordinate system=].

The <dfn export>device coordinate system</dfn> is defined as a three dimensional
Cartesian coordinate system (x, y, z), which is bound to the physical device.
For devices with a display, the origin of the [=device coordinate system=] is
the center of the device display. If the device is held in its default position,
the Y-axis points towards the top of the display, the X-axis points towards the right of
the display and Z-axis is the vector product of X and Y axes and it points outwards from
the display, and towards the viewer. The [=device coordinate system=] remains stationary
regardless of the [=dom screen=] orientation (see figure below).

<img src="images/device_coordinate_system.svg" onerror="this.src='images/device_coordinate_system.png'" style="display: block;margin: auto;" alt="Device coordinate system.">

The <dfn export>screen coordinate system</dfn> is defined as a three dimensional
Cartesian coordinate system (x, y, z), which is bound to the [=dom screen=].
The origin of the [=screen coordinate system=] in the center
of the [=dom screen=]. The Y-axis always points towards the top of the [=dom screen=],
the X-axis points towards the right of the [=dom screen=] and Z-axis is the
vector product of X and Y axes and it and it points outwards from the [=dom screen=],
and towards the viewer (see figure below).

<img src="images/screen_coordinate_system.svg" onerror="this.src='images/screen_coordinate_system.png'" style="display: block;margin: auto;" alt="Screen coordinate system.">

The main difference between the [=device coordinate system=] and the [=screen coordinate system=],
is that the [=screen coordinate system=] always follows the [=dom screen=] orientation,
i.e. it will swap X and Y axes in relation to the device if the [=current orientation type=]
changes. In contrast, the [=device coordinate system=] will always remain the same.

API {#api}
===

The SpatialSensorOptions Dictionary {#the-spatialsensoroptions-dictionary}
------------------------------------

<pre class="idl">
  enum LocalCoordinateSystem { "device", "screen" };

  dictionary SpatialSensorOptions :  SensorOptions  {
    LocalCoordinateSystem referenceFrame = "device";
  };
 </pre>

<h4 dfn export>Construct spatial sensor object</h4>

<div algorithm="construct spatial sensor object">

    : input
    :: |options|, a {{SpatialSensorOptions}} object.
    : output
    :: A {{Sensor}} object.

    1. Let |sensor_instance| be the result of invoking [=construct a Sensor object=] with |options|.
    1. If |options|.{{referenceFrame!!dict-member}} is "screen", then:
       1.  Define [=local coordinate system=] for |sensor_instance|
           as the [=screen coordinate system=].
    1. Otherwise, define [=local coordinate system=] for |sensor_instance|
       as the [=device coordinate system=].
</div>

The Accelerometer Interface {#accelerometer-interface}
--------------------------------

<pre class="idl">
  [Constructor(optional SpatialSensorOptions options), SecureContext, Exposed=Window]
  interface Accelerometer : Sensor {
    readonly attribute double? x;
    readonly attribute double? y;
    readonly attribute double? z;
  };
</pre>

To <dfn>Construct an Accelerometer Object</dfn> the user agent must invoke
the [=Construct spatial sensor object=] abstract operation.

### Accelerometer.x ### {#accelerometer-x}

The {{Accelerometer/x!!attribute}} attribute of the {{Accelerometer}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "x" as arguments. It represents the [=acceleration=] along x-axis.

### Accelerometer.y ### {#accelerometer-y}

The {{Accelerometer/y!!attribute}} attribute of the {{Accelerometer}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "y" as arguments. It represents the [=acceleration=] along y-axis.

### Accelerometer.z ### {#accelerometer-z}

The {{Accelerometer/z!!attribute}} attribute of the {{Accelerometer}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "z" as arguments. It represents the [=acceleration=] along z-axis.

The LinearAccelerationSensor Interface {#linearaccelerationsensor-interface}
--------------------------------

<pre class="idl">
  [Constructor(optional SpatialSensorOptions options), SecureContext, Exposed=Window]
  interface LinearAccelerationSensor : Accelerometer {
  };
</pre>

To <dfn>Construct a LinearAccelerationSensor Object</dfn> the user agent must invoke
the [=Construct spatial sensor object=] abstract operation.

### LinearAccelerationSensor.x ### {#linearaccelerationsensor-x}

The {{Accelerometer/x!!attribute}} attribute of the {{LinearAccelerationSensor}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "x" as arguments. It represents the [=linear acceleration=] along x-axis.

### LinearAccelerationSensor.y ### {#linearaccelerationsensor-y}

The {{Accelerometer/y!!attribute}} attribute of the {{LinearAccelerationSensor}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "y" as arguments. It represents the [=linear acceleration=] along y-axis.

### LinearAccelerationSensor.z ### {#linearaccelerationsensor-z}

The {{Accelerometer/z!!attribute}} attribute of the {{LinearAccelerationSensor}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "z" as arguments. It represents the [=linear acceleration=] along z-axis.

The GravitySensor Interface {#gravitysensor-interface}
--------------------------------

<pre class="idl">
  [Constructor(optional SpatialSensorOptions options), SecureContext, Exposed=Window]
  interface GravitySensor : Accelerometer {
  };
</pre>

To <dfn>Construct an GravitySensor Object</dfn> the user agent must invoke
the [=Construct spatial sensor object=] abstract operation.

### GravitySensor.x ### {#gravitysensor-x}

The {{Accelerometer/x!!attribute}} attribute of the {{GravitySensor}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "x" as arguments. It represents the effect of [=acceleration=] along x-axis due to
[=gravity=].

### GravitySensor.y ### {#gravitysensor-y}

The {{Accelerometer/y!!attribute}} attribute of the {{GravitySensor}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "y" as arguments. It represents the effect of [=acceleration=] along y-axis due to
[=gravity=].

### GravitySensor.z ### {#gravitysensor-z}

The {{Accelerometer/z!!attribute}} attribute of the {{GravitySensor}}
interface returns the result of invoking [=get value from latest reading=] with
`this` and "z" as arguments. It represents the effect of [=acceleration=] along z-axis due to
[=gravity=].

Acknowledgements {#acknowledgements}
================

Tobie Langel for the work on Generic Sensor API.

Conformance {#conformance}
===========

Conformance requirements are expressed with a combination of
descriptive assertions and RFC 2119 terminology. The key words "MUST",
"MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
document are to be interpreted as described in RFC 2119.
However, for readability, these words do not appear in all uppercase
letters in this specification.

All of the text of this specification is normative except sections
explicitly marked as non-normative, examples, and notes. [[!RFC2119]]

A <dfn>conformant user agent</dfn> must implement all the requirements
listed in this specification that are applicable to user agents.

The IDL fragments in this specification must be interpreted as required for
conforming IDL fragments, as described in the Web IDL specification. [[!WEBIDL]]
